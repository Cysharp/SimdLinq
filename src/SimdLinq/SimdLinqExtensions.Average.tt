<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    string summary(string x, bool nullable)
    {
        var remark = "";
        if(x is "double" or "float")
        {
            remark += """

                /// <para>Unlike Linq, the order for the sum calculation is not sequential, leading to slight differences in floating-point operations and the resulting value. While this difference is minimal you should not use this method if you require the same result as Linq.Average.</para>
            """;
        }
        var exception = "";
        if (nullable)
        {
            exception += """

               /// <exception cref="ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
           """;
        }

        return $"""
        /// <summary>
            /// Computes the average of a sequence of <see cref="{x}"/> values using SIMD acceleration.
            /// </summary>{remark}
            /// <param name="source">A collection of <see cref="{x}"/> values to calculate the average of.</param>
            /// <returns>The average of the collection of values.</returns>{exception}
            /// <exception cref="InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        """;
    }

    var retType = (string x) => x is "double" or "float" ? x : "double";

    var methodName = "Average";
    var types = new []
    {
        "int", "long", "double", "float", "uint", "ulong"
    };
#>
namespace SimdLinq;

using System.Runtime.InteropServices;

<#@ include file=".\SimdLinqExtensions.ttinclude" #>
