<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var signature = "public static unsafe bool Contains";
    var types = new []
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double"
    };
#>
namespace SimdLinq;

using System.Runtime.InteropServices;
using System.Runtime.Intrinsics;

public static partial class SimdLinqExtensions
{
<# foreach(var type in types) { #>
    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this <#= type #>[] source, <#= type #> value)
    {
        ArgumentNullException.ThrowIfNull(source);
        return ContainsCore(new ReadOnlySpan<<#= type #>>(source), value);
    }

    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this List<<#= type #>> source, <#= type #> value)
    {
        ArgumentNullException.ThrowIfNull(source);
        return ContainsCore((ReadOnlySpan<<#= type #>>)CollectionsMarshal.AsSpan(source), value);
    }

    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this Memory<<#= type #>> source, <#= type #> value)
    {
        return ContainsCore((ReadOnlySpan<<#= type #>>)source.Span, value);
    }

    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this ReadOnlyMemory<<#= type #>> source, <#= type #> value)
    {
        return ContainsCore(source.Span, value);
    }

    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this Span<<#= type #>> source, <#= type #> value)
    {
        return ContainsCore((ReadOnlySpan<<#= type #>>)source, value);
    }

    /// <summary>Compute Contains in SIMD.</summary>
    <#= signature #>(this ReadOnlySpan<<#= type #>> source, <#= type #> value)
    {
        return ContainsCore(source, value);
    }
<# } #>
}
