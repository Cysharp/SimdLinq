<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    string summary(string x, bool nullable)
    {
        var remark = "";
        if(x is "double" or "float")
        {
            remark += """

                /// <remarks>This method does not check for <see cref="float.NaN"/> <see cref="float"/>/<see cref="double"/> values and should not be used when <paramref name="source"/> may contain one.</remarks>
            """;
        }
        var exception = "";
        if (nullable)
        {
            exception += """

               /// <exception cref="ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
           """;
        }

        return $"""
        /// <summary>
            /// Returns the minimum and maximum values in a sequence of <see cref="{x}"/> values using SIMD acceleration.
            /// </summary>{remark}
            /// <param name="source">A sequence of <see cref="{x}"/> values to determine the minimum and maximum value of.</param>
            /// <returns>A tuple of the minimum and maximum values in the sequence.</returns>{exception}
            /// <exception cref="InvalidOperationException"><paramref name="source"/> contains no elements.</exception>
        """;
    }

    var retType = (string x) => $"({x} Min, {x} Max)";
   
    var methodName = "MinMax";
    var types = new []
    {
        "byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double"
    };
#>
namespace SimdLinq;

using System.Runtime.InteropServices;

<#@ include file=".\SimdLinqExtensions.ttinclude" #>
